// Mocks generated by Mockito 5.3.1 from annotations
// in app_masterclass/test/app/home/tabs/repositories/infra/repositories/gitrepo_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:app_masterclass/app/home/tabs/repositories/infra/datasources/commits_gitrepo_datasource.dart'
    as _i4;
import 'package:app_masterclass/app/home/tabs/repositories/infra/datasources/gitrepo_datasource.dart'
    as _i2;
import 'package:app_masterclass/app/home/tabs/repositories/infra/datasources/stars_gitrepo_datasource.dart'
    as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [IGitRepoDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockIGitRepoDatasource extends _i1.Mock
    implements _i2.IGitRepoDatasource {
  @override
  _i3.Future<List<dynamic>> getRepos() => (super.noSuchMethod(
        Invocation.method(
          #getRepos,
          [],
        ),
        returnValue: _i3.Future<List<dynamic>>.value(<dynamic>[]),
        returnValueForMissingStub: _i3.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i3.Future<List<dynamic>>);
}

/// A class which mocks [ICommitsGitRepoDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockICommitsGitRepoDatasource extends _i1.Mock
    implements _i4.ICommitsGitRepoDatasource {
  @override
  _i3.Future<List<dynamic>> getCommitsRepo({required dynamic repositoryName}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCommitsRepo,
          [],
          {#repositoryName: repositoryName},
        ),
        returnValue: _i3.Future<List<dynamic>>.value(<dynamic>[]),
        returnValueForMissingStub: _i3.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i3.Future<List<dynamic>>);
}

/// A class which mocks [IStarsGitRepoDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockIStarsGitRepoDatasource extends _i1.Mock
    implements _i5.IStarsGitRepoDatasource {
  @override
  _i3.Future<List<dynamic>> getStarsRepo({required String? repositoryName}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getStarsRepo,
          [],
          {#repositoryName: repositoryName},
        ),
        returnValue: _i3.Future<List<dynamic>>.value(<dynamic>[]),
        returnValueForMissingStub: _i3.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i3.Future<List<dynamic>>);
}
